generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  username          String     @unique
  email             String     @unique
  name              String
  bio               String?
  avatar            String?
  socialLinks       Json?
  role              Role       @default(AUTHOR)
  status            UserStatus @default(ACTIVE)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  lastLogin         DateTime?
  authoredPosts     Post[]     @relation("AuthoredPosts")
  coAuthoredPostIds String[]   @db.ObjectId
  coAuthoredPosts   Post[]     @relation("CoAuthors", fields: [coAuthoredPostIds], references: [id])
  comments          Comment[]
  series            Series[]

  @@map("users")
}

model Post {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  slug          String         @unique
  content       Json
  excerpt       String?
  authorId      String         @db.ObjectId
  author        User           @relation("AuthoredPosts", fields: [authorId], references: [id])
  coAuthorIds   String[]       @db.ObjectId
  coAuthors     User[]         @relation("CoAuthors", fields: [coAuthorIds], references: [id])
  categoryId    String         @db.ObjectId
  category      Category       @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tagIds        String[]       @db.ObjectId
  tags          Tag[]          @relation("PostTags", fields: [tagIds], references: [id])
  comments      Comment[]
  featuredImage Json?
  status        PostStatus     @default(DRAFT)
  visibility    PostVisibility @default(PUBLIC)
  password      String?
  seo           Json?
  metrics       Json?
  publishedAt   DateTime?
  scheduledFor  DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  seriesId      String?        @db.ObjectId
  series        Series?        @relation(fields: [seriesId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  seriesOrder   Int?

  @@map("posts")
}

model Category {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String     @unique
  slug        String     @unique
  description String?
  image       String?
  order       Int        @default(0)
  meta        Json?
  posts       Post[]
  parentId    String?    @db.ObjectId
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childrenIds String[]   @db.ObjectId
  children    Category[] @relation("CategoryHierarchy")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("categories")
}

model Tag {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  slug        String   @unique
  description String?
  postIds     String[] @db.ObjectId
  posts       Post[]   @relation("PostTags", fields: [postIds], references: [id])
  postCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("tags")
}

model Comment {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  content      String
  postId       String        @db.ObjectId
  post         Post          @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  authorId     String?       @db.ObjectId
  author       User?         @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  guestName    String?
  guestEmail   String?
  guestWebsite String?
  parentId     String?       @db.ObjectId
  parent       Comment?      @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replyIds     String[]      @db.ObjectId
  replies      Comment[]     @relation("CommentReplies")
  status       CommentStatus @default(PENDING)
  likes        Int           @default(0)
  reports      Int           @default(0)
  ip           String?
  userAgent    String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("comments")
}

model Series {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String   @unique
  description String?
  authorId    String   @db.ObjectId
  author      User     @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  posts       Post[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("series")
}

enum Role {
  ADMIN
  AUTHOR
  EDITOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum PostVisibility {
  PUBLIC
  PRIVATE
  PASSWORD_PROTECTED
}

enum CommentStatus {
  PENDING
  APPROVED
  SPAM
  DELETED
}
